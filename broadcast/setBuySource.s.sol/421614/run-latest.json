{
  "transactions": [
    {
      "hash": "0x23b93c0013fcb448289d1eeb9b2540a66fda41fbed3f6d72c4dd10c95a8cb7fb",
      "transactionType": "CALL",
      "contractName": null,
      "contractAddress": "0x0932e44afa92137355c156513588d0712c320ca2",
      "function": "setBuySource(string)",
      "arguments": [
        "const SLEEP_TIME = 7000; // 10 seconds\\nlet orderPlaced;\\n\\nasync function main() {\\n  console.log(\\\"buyTslaSimulator.js started\\\");\\n  const quantityOfTsla = args[0];\\n  const orderType = args[1]; //buy/sell\\n  // const quantityOfTsla = \\\"7\\\";\\n  // const orderType = \\\"buy\\\"; //buy/sell\\n  _checkKeys();\\n\\n  let client_order_id, responseStatus;\\n\\n  if (!orderPlaced) {\\n    [client_order_id, responseStatus] = await placeOrder(\\n      quantityOfTsla,\\n      orderType\\n    );\\n  }\\n\\n  if (responseStatus !== 200) {\\n    console.log(`Order placement failed with status: ${responseStatus}`);\\n    return Functions.encodeUint256(0);\\n  }\\n\\n  let filled = await waitForOrderToFill(client_order_id);\\n\\n  if (!filled) {\\n    console.log(\\\"Order was not filled within timeout period\\\");\\n    // await cancelOrder(client_order_id);\\n    return Functions.encodeUint256(0);\\n  }\\n\\n  const scaledQty = BigInt(quantityOfTsla) * 10n ** 18n;\\n\\n  console.log(\\\"The number returneing shld be \\\", scaledQty);\\n\\n  // Encode as uint256\\n  const encoded = Functions.encodeUint256(scaledQty);\\n\\n  return encoded;\\n\\n  // return Functions.encodeUint256(quantityOfTsla);\\n}\\n\\nasync function placeOrder(qty, side) {\\n  const alpacaRequest = Functions.makeHttpRequest({\\n    url: \\\"https://paper-api.alpaca.markets/v2/orders\\\",\\n    method: \\\"POST\\\",\\n    headers: {\\n      accept: \\\"application/json\\\",\\n      \\\"content-type\\\": \\\"application/json\\\",\\n      \\\"APCA-API-KEY-ID\\\": secrets.alpacaKey,\\n      \\\"APCA-API-SECRET-KEY\\\": secrets.alpacaSecret,\\n    },\\n    data: {\\n      type: \\\"market\\\",\\n      time_in_force: \\\"gtc\\\",\\n      side: side,\\n      symbol: \\\"TSLA\\\",\\n      qty: qty,\\n    },\\n  });\\n\\n  orderPlaced = true;\\n  await sleep(SLEEP_TIME);\\n\\n  const response = await alpacaRequest;\\n\\n  const responseStatus = response.status;\\n\\n  console.log(response);\\n  console.log(`\\\\n\\\\n`);\\n\\n  const { client_order_id, status: orderStatus } = response.data;\\n  console.log(`\\\\n Response Status in place order ${responseStatus}\\\\n\\\\n`);\\n  console.log(\\\"client_order_id:\\\", client_order_id);\\n  console.log(\\\"orderStatus: \\\", orderStatus);\\n\\n  return [client_order_id, responseStatus];\\n}\\n\\nasync function waitForOrderToFill(client_order_id) {\\n  let numberOfSleeps = 0;\\n  const capNumberOfSleeps = 5;\\n  let filled = false;\\n\\n  console.log(\\\"Started to wait\\\");\\n\\n  while (numberOfSleeps < capNumberOfSleeps) {\\n    const alpacaRequest = await Functions.makeHttpRequest({\\n      method: `GET`,\\n      url: `https://paper-api.alpaca.markets/v2/orders:by_client_order_id?client_order_id=${client_order_id}`,\\n      headers: {\\n        accept: \\\"application/json\\\",\\n        \\\"APCA-API-KEY-ID\\\": secrets.alpacaKey,\\n        \\\"APCA-API-SECRET-KEY\\\": secrets.alpacaSecret,\\n      },\\n    });\\n\\n    const response = await alpacaRequest;\\n\\n    const responseStatus = response.status;\\n\\n    console.log(`Order status check - Response Status: ${responseStatus}`);\\n\\n    // if (responseStatus !== 200) {\\n    //   console.error(`Failed to get order status: ${responseStatus}`);\\n    //   return false;\\n    // }\\n\\n    // Add null/undefined checks\\n    // if (!response.data) {\\n    //   console.error(\\\"Response data is undefined in order status check\\\");\\n    //   return false;\\n    // }\\n\\n    const orderStatus = response.data.status;\\n    console.log(`Order status: ${orderStatus}`);\\n\\n    if (orderStatus === \\\"filled\\\" || orderStatus === \\\"accepted\\\") {\\n      filled = true;\\n      break;\\n    }\\n\\n    console.log(\\\"numberOfSleeps: \\\", numberOfSleeps);\\n\\n    numberOfSleeps++;\\n    await sleep(SLEEP_TIME);\\n  }\\n  return filled;\\n}\\n\\nfunction _checkKeys() {\\n  if (secrets.alpacaKey == \\\"\\\" || secrets.alpacaSecret == \\\"\\\") {\\n    throw new Error(\\\"Need Alpaca Keys\\\");\\n  }\\n}\\n\\nfunction sleep(ms) {\\n  return new Promise((resolve) => setTimeout(resolve, ms));\\n}\\n\\nconst result = await main();\\nreturn result;\\n"
      ],
      "transaction": {
        "from": "0xa94b77db5b96d82a26243b1bd9510a3c2b6ce535",
        "to": "0x0932e44afa92137355c156513588d0712c320ca2",
        "gas": "0x35c045",
        "value": "0x0",
        "input": "0x0ae69f3400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e88636f6e737420534c4545505f54494d45203d20373030303b202f2f203130207365636f6e64730a6c6574206f72646572506c616365643b0a0a6173796e632066756e6374696f6e206d61696e2829207b0a2020636f6e736f6c652e6c6f67282262757954736c6153696d756c61746f722e6a73207374617274656422293b0a2020636f6e7374207175616e746974794f6654736c61203d20617267735b305d3b0a2020636f6e7374206f7264657254797065203d20617267735b315d3b202f2f6275792f73656c6c0a20202f2f20636f6e7374207175616e746974794f6654736c61203d202237223b0a20202f2f20636f6e7374206f7264657254797065203d2022627579223b202f2f6275792f73656c6c0a20205f636865636b4b65797328293b0a0a20206c657420636c69656e745f6f726465725f69642c20726573706f6e73655374617475733b0a0a202069662028216f72646572506c6163656429207b0a202020205b636c69656e745f6f726465725f69642c20726573706f6e73655374617475735d203d20617761697420706c6163654f72646572280a2020202020207175616e746974794f6654736c612c0a2020202020206f72646572547970650a20202020293b0a20207d0a0a202069662028726573706f6e736553746174757320213d3d2032303029207b0a20202020636f6e736f6c652e6c6f6728604f7264657220706c6163656d656e74206661696c65642077697468207374617475733a20247b726573706f6e73655374617475737d60293b0a2020202072657475726e2046756e6374696f6e732e656e636f646555696e743235362830293b0a20207d0a0a20206c65742066696c6c6564203d2061776169742077616974466f724f72646572546f46696c6c28636c69656e745f6f726465725f6964293b0a0a2020696620282166696c6c656429207b0a20202020636f6e736f6c652e6c6f6728224f7264657220776173206e6f742066696c6c65642077697468696e2074696d656f757420706572696f6422293b0a202020202f2f2061776169742063616e63656c4f7264657228636c69656e745f6f726465725f6964293b0a2020202072657475726e2046756e6374696f6e732e656e636f646555696e743235362830293b0a20207d0a0a2020636f6e7374207363616c6564517479203d20426967496e74287175616e746974794f6654736c6129202a2031306e202a2a2031386e3b0a0a2020636f6e736f6c652e6c6f672822546865206e756d6265722072657475726e65696e672073686c6420626520222c207363616c6564517479293b0a0a20202f2f20456e636f64652061732075696e743235360a2020636f6e737420656e636f646564203d2046756e6374696f6e732e656e636f646555696e74323536287363616c6564517479293b0a0a202072657475726e20656e636f6465643b0a0a20202f2f2072657475726e2046756e6374696f6e732e656e636f646555696e74323536287175616e746974794f6654736c61293b0a7d0a0a6173796e632066756e6374696f6e20706c6163654f72646572287174792c207369646529207b0a2020636f6e737420616c7061636152657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b0a2020202075726c3a202268747470733a2f2f70617065722d6170692e616c706163612e6d61726b6574732f76322f6f7264657273222c0a202020206d6574686f643a2022504f5354222c0a20202020686561646572733a207b0a2020202020206163636570743a20226170706c69636174696f6e2f6a736f6e222c0a20202020202022636f6e74656e742d74797065223a20226170706c69636174696f6e2f6a736f6e222c0a20202020202022415043412d4150492d4b45592d4944223a20736563726574732e616c706163614b65792c0a20202020202022415043412d4150492d5345435245542d4b4559223a20736563726574732e616c706163615365637265742c0a202020207d2c0a20202020646174613a207b0a202020202020747970653a20226d61726b6574222c0a20202020202074696d655f696e5f666f7263653a2022677463222c0a202020202020736964653a20736964652c0a20202020202073796d626f6c3a202254534c41222c0a2020202020207174793a207174792c0a202020207d2c0a20207d293b0a0a20206f72646572506c61636564203d20747275653b0a2020617761697420736c65657028534c4545505f54494d45293b0a0a2020636f6e737420726573706f6e7365203d20617761697420616c70616361526571756573743b0a0a2020636f6e737420726573706f6e7365537461747573203d20726573706f6e73652e7374617475733b0a0a2020636f6e736f6c652e6c6f6728726573706f6e7365293b0a2020636f6e736f6c652e6c6f6728605c6e5c6e60293b0a0a2020636f6e7374207b20636c69656e745f6f726465725f69642c207374617475733a206f72646572537461747573207d203d20726573706f6e73652e646174613b0a2020636f6e736f6c652e6c6f6728605c6e20526573706f6e73652053746174757320696e20706c616365206f7264657220247b726573706f6e73655374617475737d5c6e5c6e60293b0a2020636f6e736f6c652e6c6f672822636c69656e745f6f726465725f69643a222c20636c69656e745f6f726465725f6964293b0a2020636f6e736f6c652e6c6f6728226f726465725374617475733a20222c206f72646572537461747573293b0a0a202072657475726e205b636c69656e745f6f726465725f69642c20726573706f6e73655374617475735d3b0a7d0a0a6173796e632066756e6374696f6e2077616974466f724f72646572546f46696c6c28636c69656e745f6f726465725f696429207b0a20206c6574206e756d6265724f66536c65657073203d20303b0a2020636f6e7374206361704e756d6265724f66536c65657073203d20353b0a20206c65742066696c6c6564203d2066616c73653b0a0a2020636f6e736f6c652e6c6f6728225374617274656420746f207761697422293b0a0a20207768696c6520286e756d6265724f66536c65657073203c206361704e756d6265724f66536c6565707329207b0a20202020636f6e737420616c7061636152657175657374203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b0a2020202020206d6574686f643a2060474554602c0a20202020202075726c3a206068747470733a2f2f70617065722d6170692e616c706163612e6d61726b6574732f76322f6f72646572733a62795f636c69656e745f6f726465725f69643f636c69656e745f6f726465725f69643d247b636c69656e745f6f726465725f69647d602c0a202020202020686561646572733a207b0a20202020202020206163636570743a20226170706c69636174696f6e2f6a736f6e222c0a202020202020202022415043412d4150492d4b45592d4944223a20736563726574732e616c706163614b65792c0a202020202020202022415043412d4150492d5345435245542d4b4559223a20736563726574732e616c706163615365637265742c0a2020202020207d2c0a202020207d293b0a0a20202020636f6e737420726573706f6e7365203d20617761697420616c70616361526571756573743b0a0a20202020636f6e737420726573706f6e7365537461747573203d20726573706f6e73652e7374617475733b0a0a20202020636f6e736f6c652e6c6f6728604f726465722073746174757320636865636b202d20526573706f6e7365205374617475733a20247b726573706f6e73655374617475737d60293b0a0a202020202f2f2069662028726573706f6e736553746174757320213d3d2032303029207b0a202020202f2f202020636f6e736f6c652e6572726f7228604661696c656420746f20676574206f72646572207374617475733a20247b726573706f6e73655374617475737d60293b0a202020202f2f20202072657475726e2066616c73653b0a202020202f2f207d0a0a202020202f2f20416464206e756c6c2f756e646566696e656420636865636b730a202020202f2f206966202821726573706f6e73652e6461746129207b0a202020202f2f202020636f6e736f6c652e6572726f722822526573706f6e7365206461746120697320756e646566696e656420696e206f726465722073746174757320636865636b22293b0a202020202f2f20202072657475726e2066616c73653b0a202020202f2f207d0a0a20202020636f6e7374206f72646572537461747573203d20726573706f6e73652e646174612e7374617475733b0a20202020636f6e736f6c652e6c6f6728604f72646572207374617475733a20247b6f726465725374617475737d60293b0a0a20202020696620286f72646572537461747573203d3d3d202266696c6c656422207c7c206f72646572537461747573203d3d3d202261636365707465642229207b0a20202020202066696c6c6564203d20747275653b0a202020202020627265616b3b0a202020207d0a0a20202020636f6e736f6c652e6c6f6728226e756d6265724f66536c656570733a20222c206e756d6265724f66536c65657073293b0a0a202020206e756d6265724f66536c656570732b2b3b0a20202020617761697420736c65657028534c4545505f54494d45293b0a20207d0a202072657475726e2066696c6c65643b0a7d0a0a66756e6374696f6e205f636865636b4b6579732829207b0a202069662028736563726574732e616c706163614b6579203d3d202222207c7c20736563726574732e616c70616361536563726574203d3d20222229207b0a202020207468726f77206e6577204572726f7228224e65656420416c70616361204b65797322293b0a20207d0a7d0a0a66756e6374696f6e20736c656570286d7329207b0a202072657475726e206e65772050726f6d69736528287265736f6c766529203d3e2073657454696d656f7574287265736f6c76652c206d7329293b0a7d0a0a636f6e737420726573756c74203d206177616974206d61696e28293b0a72657475726e20726573756c743b0a000000000000000000000000000000000000000000000000",
        "nonce": "0x69",
        "chainId": "0x66eee"
      },
      "additionalContracts": [],
      "isFixedGasLimit": false
    }
  ],
  "receipts": [
    {
      "status": "0x1",
      "cumulativeGasUsed": "0x2900f5",
      "logs": [],
      "logsBloom": "0x
      "type": "0x2",
      "transactionHash": "0x23b93c0013fcb448289d1eeb9b2540a66fda41fbed3f6d72c4dd10c95a8cb7fb",
      "transactionIndex": "0x1",
      "blockHash": "0xbe4cef153705393a7f52a82167ebfdc452a968786b264b9ebc9b3d46e1615f62",
      "blockNumber": "0xa63fbfd",
      "gasUsed": "0x2900f5",
      "effectiveGasPrice": "0x5f5e100",
      "from": "0xa94b77db5b96d82a26243b1bd9510a3c2b6ce535",
      "to": "0x0932e44afa92137355c156513588d0712c320ca2",
      "contractAddress": null,
      "gasUsedForL1": "0x0",
      "l1BlockNumber": "0x85faca",
      "timeboosted": false
    }
  ],
  "libraries": [],
  "pending": [],
  "returns": {},
  "timestamp": 1752719756,
  "chain": 421614,
  "commit": "c0458d4"
}